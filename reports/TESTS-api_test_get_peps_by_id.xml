<testsuite errors="0" failures="4" hostname="MEWS1" name="api_test_get_peps_by_id.Create PEPS" skipped="0" tests="4" time="0.298376" timestamp="2020-07-02T14:58:45.571332"><testcase classname="api_test_get_peps_by_id.Create PEPS" name="Create politicians with valid data -- @1.1 " status="failed" time="0.068781"><failure message="Response returned: 0 expected: 1970" type="AssertionError">
<![CDATA[
Failing step: And I examine the returned "1970" in the response ... failed in 0.000s
Location: features/api_test_get_peps_by_id.feature:14
Assertion Failed: Response returned: 0 expected: 1970]]>
</failure><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: Create politicians with valid data -- @1.1 
    Given I have access to the politician API Service Environment ... passed in 0.001s
    And I build the endpoint to access politician API ... passed in 0.001s
    And I build the HTTP header details ... passed in 0.001s
    When I send the GET peps by "5efc7a090f0698013cf20a96" request ... passed in 0.063s
    Then I verify the response http code is 200 ... passed in 0.001s
    Then I validate GET by ID response json schema ... passed in 0.001s
    And I validate the returned "John Doe" in the response ... passed in 0.001s
    And I check the "Wales" in the response ... passed in 0.000s
    And I validate the "Minister of Perry" returned in the response ... passed in 0.000s
    And I validate the "1" in the returned response ... passed in 0.000s
    And I examine the returned "1970" in the response ... failed in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="api_test_get_peps_by_id.Create PEPS" name="Create politicians with valid data -- @1.2 " status="failed" time="0.084963"><failure message="Response returned: 0 expected: 1980" type="AssertionError">
<![CDATA[
Failing step: And I examine the returned "1980" in the response ... failed in 0.000s
Location: features/api_test_get_peps_by_id.feature:14
Assertion Failed: Response returned: 0 expected: 1980]]>
</failure><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: Create politicians with valid data -- @1.2 
    Given I have access to the politician API Service Environment ... passed in 0.000s
    And I build the endpoint to access politician API ... passed in 0.001s
    And I build the HTTP header details ... passed in 0.001s
    When I send the GET peps by "5efc5ba40f069801301a458c" request ... passed in 0.082s
    Then I verify the response http code is 200 ... passed in 0.000s
    Then I validate GET by ID response json schema ... passed in 0.001s
    And I validate the returned "John Smith" in the response ... passed in 0.000s
    And I check the "England" in the response ... passed in 0.000s
    And I validate the "Minister of Ales" returned in the response ... passed in 0.000s
    And I validate the "2" in the returned response ... passed in 0.000s
    And I examine the returned "1980" in the response ... failed in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="api_test_get_peps_by_id.Create PEPS" name="Create politicians with valid data -- @1.3 " status="failed" time="0.069834"><failure message="Response returned: 0 expected: 1981" type="AssertionError">
<![CDATA[
Failing step: And I examine the returned "1981" in the response ... failed in 0.000s
Location: features/api_test_get_peps_by_id.feature:14
Assertion Failed: Response returned: 0 expected: 1981]]>
</failure><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: Create politicians with valid data -- @1.3 
    Given I have access to the politician API Service Environment ... passed in 0.000s
    And I build the endpoint to access politician API ... passed in 0.001s
    And I build the HTTP header details ... passed in 0.000s
    When I send the GET peps by "5efc5ab60f069801301a4589" request ... passed in 0.067s
    Then I verify the response http code is 200 ... passed in 0.000s
    Then I validate GET by ID response json schema ... passed in 0.001s
    And I validate the returned "Jane Doe" in the response ... passed in 0.001s
    And I check the "Scotland" in the response ... passed in 0.000s
    And I validate the "Minister of Single Malts" returned in the response ... passed in 0.000s
    And I validate the "3" in the returned response ... passed in 0.000s
    And I examine the returned "1981" in the response ... failed in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="api_test_get_peps_by_id.Create PEPS" name="Create politicians with valid data -- @1.4 " status="failed" time="0.074799"><failure message="Response returned: 0 expected: 1982" type="AssertionError">
<![CDATA[
Failing step: And I examine the returned "1982" in the response ... failed in 0.001s
Location: features/api_test_get_peps_by_id.feature:14
Assertion Failed: Response returned: 0 expected: 1982]]>
</failure><system-out>
<![CDATA[
@scenario.begin
  Scenario Outline: Create politicians with valid data -- @1.4 
    Given I have access to the politician API Service Environment ... passed in 0.000s
    And I build the endpoint to access politician API ... passed in 0.001s
    And I build the HTTP header details ... passed in 0.000s
    When I send the GET peps by "5efc5ab60f069801301a458a" request ... passed in 0.072s
    Then I verify the response http code is 200 ... passed in 0.000s
    Then I validate GET by ID response json schema ... passed in 0.001s
    And I validate the returned "Jane Smith" in the response ... passed in 0.000s
    And I check the "Nothern Ireland" in the response ... passed in 0.000s
    And I validate the "Minister of Guinness" returned in the response ... passed in 0.000s
    And I validate the "4" in the returned response ... passed in 0.000s
    And I examine the returned "1982" in the response ... failed in 0.001s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>